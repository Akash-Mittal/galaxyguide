package com.practise.galaxyguide.aggregator;

import java.util.ArrayList;
import java.util.List;

import com.practise.galaxyguide.aggregator.InterpreterAggregatorImpl;
import com.practise.galaxyguide.domains.BaseDomain;
import com.practise.galaxyguide.domains.Credits;
import com.practise.galaxyguide.domains.ForeignLiteral;
import com.practise.galaxyguide.domains.RomanAndForeignLiteral;
import com.practise.galaxyguide.domains.RomanNumeralLiteral;
import com.practise.galaxyguide.interpreter.InterpreterContext;
import com.practise.galaxyguide.interpreter.InterpreterFactory;

import junit.framework.TestCase;

public class InterpreterAggregatorImplTest extends TestCase {

    public void test_type() throws Exception {
        // TODO auto-generated by JUnit Helper.
        assertNotNull(InterpreterAggregatorImpl.class);
    }

    public void test_instantiation() throws Exception {
        // TODO auto-generated by JUnit Helper.
        InterpreterFactory interpreterFactory = null;
        InterpreterAggregatorImpl target = new InterpreterAggregatorImpl(interpreterFactory);
        assertNotNull(target);
    }

    public void test_getAllRomanandForiegnLiterl_A$List() throws Exception {
        InterpreterFactory interpreterFactory = new InterpreterFactory(new InterpreterContext());
        InterpreterAggregatorImpl target = new InterpreterAggregatorImpl(interpreterFactory);
        List<String> inputList = new ArrayList<String>();
        inputList.add("glob is I");
        inputList.add("prok is V");
        inputList.add("pish is X");
        inputList.add("tegj is L");

        List<BaseDomain> actual = target.getAllRomanandForiegnLiterl(inputList);

        List<RomanAndForeignLiteral> expected = new ArrayList<RomanAndForeignLiteral>();
        expected.add(new RomanAndForeignLiteral(RomanNumeralLiteral.I, new ForeignLiteral("glob")));
        expected.add(new RomanAndForeignLiteral(RomanNumeralLiteral.V, new ForeignLiteral("prok")));
        expected.add(new RomanAndForeignLiteral(RomanNumeralLiteral.X, new ForeignLiteral("pish")));
        expected.add(new RomanAndForeignLiteral(RomanNumeralLiteral.L, new ForeignLiteral("tegj")));

        assertEquals(expected.size(), actual.size());
        assertEquals(expected.get(0).toString(), actual.get(0).toString());
        assertEquals(expected.get(1).toString(), actual.get(1).toString());
        assertEquals(expected.get(2).toString(), actual.get(2).toString());
        assertEquals(expected.get(3).toString(), actual.get(3).toString());

    }

    public void test_getAllForeignLiteralCredits_A$List() throws Exception {
        InterpreterFactory interpreterFactory = new InterpreterFactory(new InterpreterContext());
        InterpreterAggregatorImpl target = new InterpreterAggregatorImpl(interpreterFactory);
        List<String> inputList = new ArrayList<String>();
        inputList.add("glob glob silver is 34 credit");
        inputList.add("glob prok gold is 57800 credit");
        inputList.add("pish pish iron is 3910 credit");

        List<BaseDomain> actual = target.getAllForeignLiteralCredits(inputList);
        ForeignLiteral glob = new ForeignLiteral("glob");
        ForeignLiteral prok = new ForeignLiteral("prok");
        ForeignLiteral pish = new ForeignLiteral("pish");
        ForeignLiteral silver = new ForeignLiteral("silver");
        ForeignLiteral gold = new ForeignLiteral("gold");
        ForeignLiteral iron = new ForeignLiteral("iron");

        Credits credits1 = new Credits();
        Credits credits2 = new Credits();
        Credits credits3 = new Credits();

        credits1.setCredits(34);
        credits2.setCredits(57800);
        credits3.setCredits(3910);

        List<ForeignLiteral> fl1 = new ArrayList<>();

        fl1.add(glob);
        fl1.add(glob);
        fl1.add(silver);
        credits1.setForeignLiterals(fl1);

        fl1.clear();

        fl1.add(glob);
        fl1.add(prok);
        fl1.add(gold);
        credits2.setForeignLiterals(fl1);

        fl1.clear();

        fl1.add(pish);
        fl1.add(pish);
        fl1.add(iron);
        credits3.setForeignLiterals(fl1);

        fl1.clear();

        List<Credits> expected = new ArrayList<Credits>();
        expected.add(credits1);
        expected.add(credits2);
        expected.add(credits3);

        assertEquals(expected.size(), actual.size());
        assertEquals((expected.get(0).getCredits()), ((Credits) actual.get(0)).getCredits());
    }

    /*
     * public void test_getAllMuchQuestions_A$List() throws Exception { // TODO auto-generated by JUnit Helper.
     * InterpreterFactory interpreterFactory = null; InterpreterAggregatorImpl target = new
     * InterpreterAggregatorImpl(interpreterFactory); List<String> inputList = new ArrayList<String>(); List<BaseDomain>
     * actual = target.getAllMuchQuestions(inputList); List<BaseDomain> expected = null; assertEquals(expected, actual);
     * }
     * 
     * public void test_getAllManyQuestions_A$List() throws Exception { // TODO auto-generated by JUnit Helper.
     * InterpreterFactory interpreterFactory = null; InterpreterAggregatorImpl target = new
     * InterpreterAggregatorImpl(interpreterFactory); List<String> inputList = new ArrayList<String>(); List<BaseDomain>
     * actual = target.getAllManyQuestions(inputList); List<BaseDomain> expected = null; assertEquals(expected, actual);
     * }
     * 
     * public void test_main_A$StringArray() throws Exception { // TODO auto-generated by JUnit Helper. String[] args =
     * new String[] {}; InterpreterAggregatorImpl.main(args); }
     */

}
