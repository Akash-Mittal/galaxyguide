package com.practise.galaxyguide.helper;

import java.util.ArrayList;
import java.util.List;

import com.practise.galaxyguide.aggregator.InterpreterAggregator;
import com.practise.galaxyguide.aggregator.InterpreterAggregatorImpl;
import com.practise.galaxyguide.domains.Credits;
import com.practise.galaxyguide.domains.Creditss;
import com.practise.galaxyguide.domains.ForeignLiteral;
import com.practise.galaxyguide.domains.Metals;
import com.practise.galaxyguide.domains.RomanAndForeignLiteral;
import com.practise.galaxyguide.domains.RomanNumeralLiteral;
import com.practise.galaxyguide.helper.InterGalacticSolutionHelperReciever;
import com.practise.galaxyguide.interpreter.InterpreterContext;
import com.practise.galaxyguide.interpreter.InterpreterFactory;

import junit.framework.TestCase;

public class InterGalacticSolutionHelperRecieverTest extends TestCase {

    public void test_type() throws Exception {
        // TODO auto-generated by JUnit Helper.
        assertNotNull(InterGalacticSolutionHelperReciever.class);
    }

    public void test_instantiation() throws Exception {
        // TODO auto-generated by JUnit Helper.
        InterGalacticSolutionHelperReciever target = new InterGalacticSolutionHelperReciever();
        assertNotNull(target);
    }

    public void test_getAllMetalValues_A$List() throws Exception {
        InterpreterAggregator agg = new InterpreterAggregatorImpl(new InterpreterFactory(new InterpreterContext()));
        InterGalacticSolutionHelperReciever target = new InterGalacticSolutionHelperReciever();
        Metals metals = (Metals) target.getAllMetalValues(agg.getAllForeignLiteralCredits(mockGoodCreditsData()),
                agg.getAllRomanandForiegnLiterl(mockGoodRomanAndForeignLiteralData()));

        System.out.println(metals.getMetalsList().get(0).toString());
        System.out.println(metals.getMetalsList().get(1).toString());
        System.out.println(metals.getMetalsList().get(2).toString());
    }

    public void testGetAnswerToMuchQuestion() throws Exception {
        InterpreterAggregator agg = new InterpreterAggregatorImpl(new InterpreterFactory(new InterpreterContext()));
        InterGalacticSolutionHelperReciever target = new InterGalacticSolutionHelperReciever();
        Creditss credits = (Creditss) target.getAnswerToMuchQuestion(agg.getAllMuchQuestions(mockMuchQuestionData()),
                agg.getAllRomanandForiegnLiterl(mockGoodRomanAndForeignLiteralData()));
        for (Credits credits2 : credits.getCredtiss()) {
            System.out.println(credits2);
        }

    }

    public void testGetAnswerToManyQuestion() throws Exception {
        InterpreterAggregator agg = new InterpreterAggregatorImpl(new InterpreterFactory(new InterpreterContext()));
        InterGalacticSolutionHelperReciever target = new InterGalacticSolutionHelperReciever();
        Creditss credits = (Creditss) target.getAnswerToManyQuestion(
                agg.getAllForeignLiteralCredits(mockGoodCreditsData()),
                agg.getAllRomanandForiegnLiterl(mockGoodRomanAndForeignLiteralData()),
                agg.getAllManyQuestions(mockManyQuestionData()));
        for (Credits credits2 : credits.getCredtiss()) {
            System.out.println(credits2);
        }
    }

    public static List<String> mockManyQuestionData() {
        List<String> inputList = new ArrayList<String>();
        inputList.add("how many credit is glob prok silver ?");
        inputList.add("how many credit is glob prok iron ?");
        inputList.add("how many credit is glob prok gold ?");

        return inputList;
    }

    public static List<String> mockMuchQuestionData() {
        List<String> inputList = new ArrayList<String>();
        inputList.add("how much is glob glob glob ?");
        inputList.add("how much is glob glob ?");
        inputList.add("how much is prok glob glob ?");
        inputList.add("how much is glob tegj ?");
        inputList.add("how much is glob prok ?");

        return inputList;
    }

    public static List<String> mockGoodRomanAndForeignLiteralData() {
        List<String> inputList = new ArrayList<String>();
        inputList.add("glob is I");
        inputList.add("prok is V");
        inputList.add("pish is X");
        inputList.add("tegj is L");
        return inputList;
    }

    public static List<RomanAndForeignLiteral> mockGoodRomanAndForeignLiteralObjects() {
        List<RomanAndForeignLiteral> expected = new ArrayList<RomanAndForeignLiteral>();
        expected.add(new RomanAndForeignLiteral(RomanNumeralLiteral.I, new ForeignLiteral("glob")));
        expected.add(new RomanAndForeignLiteral(RomanNumeralLiteral.V, new ForeignLiteral("prok")));
        expected.add(new RomanAndForeignLiteral(RomanNumeralLiteral.X, new ForeignLiteral("pish")));
        expected.add(new RomanAndForeignLiteral(RomanNumeralLiteral.L, new ForeignLiteral("tegj")));
        return expected;
    }

    public static List<String> mockGoodCreditsData() {
        List<String> inputList = new ArrayList<String>();
        inputList.add("glob glob silver is 34 credit");
        inputList.add("glob prok gold is 57800 credit");
        inputList.add("pish pish iron is 3910 credit");
        return inputList;
    }

    public static List<Credits> mockGoodCreditsObjects() {

        ForeignLiteral glob = new ForeignLiteral("glob");
        ForeignLiteral prok = new ForeignLiteral("prok");
        ForeignLiteral pish = new ForeignLiteral("pish");
        ForeignLiteral silver = new ForeignLiteral("silver");
        ForeignLiteral gold = new ForeignLiteral("gold");
        ForeignLiteral iron = new ForeignLiteral("iron");

        Credits credits1 = new Credits();
        Credits credits2 = new Credits();
        Credits credits3 = new Credits();

        credits1.setCredits(34);
        credits2.setCredits(57800);
        credits3.setCredits(3910);

        List<ForeignLiteral> fl1 = new ArrayList<>();

        fl1.add(glob);
        fl1.add(glob);
        fl1.add(silver);
        credits1.setForeignLiterals(fl1);

        fl1.clear();

        fl1.add(glob);
        fl1.add(prok);
        fl1.add(gold);
        credits2.setForeignLiterals(fl1);

        fl1.clear();

        fl1.add(pish);
        fl1.add(pish);
        fl1.add(iron);
        credits3.setForeignLiterals(fl1);

        fl1.clear();

        List<Credits> expected = new ArrayList<Credits>();
        expected.add(credits1);
        expected.add(credits2);
        expected.add(credits3);

        return expected;

    }

}
